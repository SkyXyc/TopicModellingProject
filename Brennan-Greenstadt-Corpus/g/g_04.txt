Of course now in court he is not wearing said grill.
The defendant will be charged with either receiving stolen goods or check fraud. He had been caught on the bus with the merchandise but claimed he bought it from one of the men who pleaded guilty. I am the main piece of evidence linking him to the crime. Should I base my response on the day it happened, on the photo I saw again before entering the court room, or on the man sitting in front of me? Will my statements matter anyway? Or will the defense attorney get his client off the hook without my testimony? I sit trying to clear my head and find the answer to the question at hand.
Adrenalin is now pumping through me as I stare at him across the table. Sweat is beading on my hairline. I rip through the archives of my memory, trying to pull the best image I have from the incident and see if it is the man across from me. We stare each other in the eye and he mouths "come on" in disbelief. Closing my eyes one last time, I push my memory as hard as I can. The man's life could be hugely affected by the charges brought against him and I can't do it. I can't say without a doubt that it was in fact him. 
"I think it was him." I am excused. I did the best I could.
Gotterbarn then puts the majority of the ethical blame on the software engineer. I disagree. In this paper I will argue that the software engineer should be held responsible for doing his job, and that software does not fail if produced on schedule, within budget, and meets the customer's requirements.

By this definition, Gotterbarn takes a broad sweeping approach to determining the final outcome of a piece of software. This approach argues that when determining the impact of a piece of software, the developers and customers should look outside their own business and see who else could be impacted. There are usually obvious impacts of a change, but there are also going to be impacts as a result of a trickle down effect which may be harder to identify.
Software risks are the risks associated with not producing a quality product on schedule. According to Gotterbarn, developers do not appropriately evaluate risk. Gotterbarn implies that most development teams do not consider ethical issues are not considered risks by most development teams, and argues that they should.
Gotterbarn also has a problem with stakeholder identification in software development. Gotterbarn argues that anyone affected by the end product should be considered a stakeholder, arguing that the development process. Gotterbarn feels there should be more attention given to those not immediately affected by the end product.
Gotterbarn obviously takes a utilitarian stance on what he considers to be the developer's moral responsibility. Arguing that the developer must do the least harm to others, including those other than the end user and customer, adds unfair pressure to the development team. 
